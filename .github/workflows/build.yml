name: Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-22.04, macos-latest ]  # Remove windows-latest
        build_type: [ Release ]
        include:
          - os: ubuntu-22.04
            generator: "Unix Makefiles"
          - os: macos-latest
            generator: "Unix Makefiles"

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev libappindicator3-dev

      # macOS code signing setup
      - name: Import Code-Signing Certificates
        if: matrix.os == 'macos-latest'
        uses: Apple-Actions/import-codesign-certs@v2
        with:
          p12-file-base64: ${{ secrets.APPLE_CERTIFICATE_BASE64 }}
          p12-password: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          keychain-password: ${{ github.run_id }}

      - name: Install MinGW for Windows cross-compilation
        if: matrix.os == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y mingw-w64 

      - name: Configure CMake (Linux native)
        if: matrix.os == 'ubuntu-22.04'
        run: |
          # Native Linux build
          cmake -B ${{github.workspace}}/build-linux \
            -G "Unix Makefiles" \
            -DCMAKE_BUILD_TYPE=${{matrix.build_type}}
          
          # Windows cross-compilation
          cmake -B ${{github.workspace}}/build-windows \
            -G "Unix Makefiles" \
            -DCMAKE_BUILD_TYPE=${{matrix.build_type}} \
            -DCMAKE_SYSTEM_NAME=Windows \
            -DCMAKE_CROSSCOMPILING=TRUE \
            -DCMAKE_C_COMPILER=x86_64-w64-mingw32-gcc \
            -DCMAKE_CXX_COMPILER=x86_64-w64-mingw32-g++ \
            -DCMAKE_RC_COMPILER=x86_64-w64-mingw32-windres

      - name: Configure CMake (Non-Windows)
        if: matrix.os != 'windows-latest'
        run: >
          cmake -B ${{github.workspace}}/build 
          -G "${{matrix.generator}}" 
          -DCMAKE_BUILD_TYPE=${{matrix.build_type}}
          -DCMAKE_OSX_ARCHITECTURES="x86_64;arm64"
          ${{ matrix.os == 'macos-latest' && '-DCMAKE_CXX_FLAGS=-D_DARWIN_C_SOURCE' || '' }}

      - name: Build (Linux native and Windows)
        if: matrix.os == 'ubuntu-22.04'
        run: |
          cmake --build ${{github.workspace}}/build-linux --config ${{matrix.build_type}}
          cmake --build ${{github.workspace}}/build-windows --config ${{matrix.build_type}}

      - name: Build
        run: cmake --build ${{github.workspace}}/build --config ${{matrix.build_type}}

      # macOS code signing
      - name: Sign the macOS application
        if: matrix.os == 'macos-latest'
        env:
          CERT_NAME: "Developer ID Application: ${{ vars.APPLE_SIGNING_ID }}"
        run: |
          export XX="#$CERT_NAME#"
          echo "Using cert name: $XX"
          /usr/bin/codesign --force --options runtime --sign "$CERT_NAME" --verbose "${{github.workspace}}/build/usbc-power-osd.app"

      # macOS notarization (optional but recommended)
      - name: Notarize the macOS application
        if: matrix.os == 'macos-latest'
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
        run: |
          # Create a ZIP archive of the app
          ditto -c -k --keepParent "${{github.workspace}}/build/usbc-power-osd.app" "${{github.workspace}}/build/usbc-power-osd.zip"
          
          # Notarize the app
          xcrun notarytool submit "${{github.workspace}}/build/usbc-power-osd.zip" \
            --apple-id "$APPLE_ID" \
            --password "$APPLE_ID_PASSWORD" \
            --team-id "${{vars.APPLE_TEAM_ID}}" \
            --wait
          
          # Staple the notarization ticket
          xcrun stapler staple "${{github.workspace}}/build/usbc-power-osd.app"

      - name: Create Windows package
        if: matrix.os == 'ubuntu-22.04'
        run: |
          7z a -tzip "${{github.workspace}}/build-windows/Owon1041-${{ steps.get_version.outputs.VERSION }}-Windows.zip" \
            "${{github.workspace}}/build-windows/usbc-power-osd.exe"

      # Update the artifacts upload accordingly
      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts-${{ matrix.os }}
          path: |
            ${{ matrix.os == 'macos-latest' && github.workspace }}/build/*.dmg
            ${{ matrix.os == 'ubuntu-22.04' && github.workspace }}/build-linux/*.tar.gz
            ${{ matrix.os == 'ubuntu-22.04' && github.workspace }}/build-windows/*.zip
          if-no-files-found: error